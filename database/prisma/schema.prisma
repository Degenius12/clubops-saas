// ClubOps SaaS - Prisma Schema
// Multi-tenant database schema with subscription management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================
// MULTI-TENANT FOUNDATION
// ==============================================

model Club {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String   @db.VarChar(255)
  subdomain         String   @unique @db.VarChar(50)
  subscriptionTier  String   @default("free") @map("subscription_tier") @db.VarChar(20)
  subscriptionStatus String  @default("active") @map("subscription_status") @db.VarChar(20)
  settings          Json     @default("{}")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  users               ClubUser[]
  dancers             Dancer[]
  djQueue             DjQueue[]
  musicLibrary        MusicLibrary[]
  vipRooms            VipRoom[]
  vipSessions         VipSession[]
  financialTransactions FinancialTransaction[]
  subscriptions       Subscription[]
  usageAnalytics      UsageAnalytics[]
  paymentMethods      PaymentMethod[]

  @@map("clubs")
}

model ClubUser {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId      String    @map("club_id") @db.Uuid
  email       String    @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  role        String    @db.VarChar(50)
  firstName   String?   @map("first_name") @db.VarChar(100)
  lastName    String?   @map("last_name") @db.VarChar(100)
  isActive    Boolean   @default(true) @map("is_active")
  lastLogin   DateTime? @map("last_login")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  recordedTransactions FinancialTransaction[]

  @@unique([clubId, email])
  @@map("club_users")
}

// ==============================================
// CORE BUSINESS MODELS
// ==============================================

model Dancer {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId           String    @map("club_id") @db.Uuid
  stageName        String    @map("stage_name") @db.VarChar(100)
  legalName        String?   @map("legal_name") @db.VarChar(200)
  phone            String?   @db.VarChar(20)
  email            String?   @db.VarChar(255)
  licenseNumber    String?   @map("license_number") @db.VarChar(100)
  licenseExpiryDate DateTime? @map("license_expiry_date") @db.Date
  licenseStatus    String    @default("valid") @map("license_status") @db.VarChar(20)
  emergencyContact Json      @default("{}") @map("emergency_contact")
  preferredMusic   Json      @default("[]") @map("preferred_music")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  djQueue DjQueue[]
  vipSessions VipSession[]
  financialTransactions FinancialTransaction[]

  @@map("dancers")
}

model DjQueue {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId          String    @map("club_id") @db.Uuid
  dancerId        String    @map("dancer_id") @db.Uuid
  stageName       String    @map("stage_name") @db.VarChar(50)
  position        Int
  songRequest     String?   @map("song_request") @db.VarChar(255)
  durationMinutes Int       @default(3) @map("duration_minutes")
  status          String    @default("queued") @db.VarChar(20)
  startedAt       DateTime? @map("started_at")
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  dancer Dancer @relation(fields: [dancerId], references: [id], onDelete: Cascade)

  @@map("dj_queue")
}

model MusicLibrary {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId        String   @map("club_id") @db.Uuid
  title         String   @db.VarChar(255)
  artist        String?  @db.VarChar(255)
  album         String?  @db.VarChar(255)
  durationSeconds Int?   @map("duration_seconds")
  filePath      String?  @map("file_path") @db.VarChar(500)
  fileSize      BigInt?  @map("file_size")
  fileFormat    String?  @map("file_format") @db.VarChar(10)
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("music_library")
}

model VipRoom {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId      String    @map("club_id") @db.Uuid
  roomName    String    @map("room_name") @db.VarChar(50)
  capacity    Int       @default(4)
  hourlyRate  Decimal?  @map("hourly_rate") @db.Decimal(10, 2)
  isAvailable Boolean   @default(true) @map("is_available")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  sessions VipSession[]

  @@map("vip_rooms")
}

model VipSession {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId          String    @map("club_id") @db.Uuid
  roomId          String    @map("room_id") @db.Uuid
  dancerId        String    @map("dancer_id") @db.Uuid
  customerName    String?   @map("customer_name") @db.VarChar(100)
  startedAt       DateTime  @default(now()) @map("started_at")
  endedAt         DateTime? @map("ended_at")
  durationMinutes Int?      @map("duration_minutes")
  amountCharged   Decimal?  @map("amount_charged") @db.Decimal(10, 2)
  status          String    @default("active") @db.VarChar(20)

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  room VipRoom @relation(fields: [roomId], references: [id])
  dancer Dancer @relation(fields: [dancerId], references: [id])

  @@map("vip_sessions")
}

model FinancialTransaction {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId          String    @map("club_id") @db.Uuid
  dancerId        String?   @map("dancer_id") @db.Uuid
  transactionType String    @map("transaction_type") @db.VarChar(30)
  amount          Decimal   @db.Decimal(10, 2)
  description     String?
  paymentMethod   String    @default("cash") @map("payment_method") @db.VarChar(20)
  isPaid          Boolean   @default(false) @map("is_paid")
  dueDate         DateTime? @map("due_date") @db.Date
  recordedBy      String?   @map("recorded_by") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  dancer Dancer? @relation(fields: [dancerId], references: [id])
  recordedByUser ClubUser? @relation(fields: [recordedBy], references: [id])

  @@map("financial_transactions")
}

// ==============================================
// SAAS INFRASTRUCTURE MODELS
// ==============================================

model Subscription {
  id                     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId                 String   @map("club_id") @db.Uuid
  stripeSubscriptionId   String?  @unique @map("stripe_subscription_id") @db.VarChar(255)
  status                 String   @default("active") @db.VarChar(20)
  currentPeriodStart     DateTime @map("current_period_start")
  currentPeriodEnd       DateTime @map("current_period_end")
  trialEnd               DateTime? @map("trial_end")
  cancelAtPeriodEnd      Boolean  @default(false) @map("cancel_at_period_end")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UsageAnalytics {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId      String    @map("club_id") @db.Uuid
  eventType   String    @map("event_type") @db.VarChar(50)
  eventData   Json      @default("{}") @map("event_data")
  userId      String?   @map("user_id") @db.Uuid
  sessionId   String?   @map("session_id") @db.VarChar(100)
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("usage_analytics")
}

model FeatureFlag {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  featureName    String   @unique @map("feature_name") @db.VarChar(100)
  freeTier       Boolean  @default(false) @map("free_tier")
  basicTier      Boolean  @default(false) @map("basic_tier")
  proTier        Boolean  @default(false) @map("pro_tier")
  enterpriseTier Boolean  @default(false) @map("enterprise_tier")
  description    String?
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("feature_flags")
}

model PaymentMethod {
  id                     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  clubId                 String   @map("club_id") @db.Uuid
  stripePaymentMethodId  String   @map("stripe_payment_method_id") @db.VarChar(255)
  type                   String   @db.VarChar(20)
  cardLast4              String?  @map("card_last4") @db.VarChar(4)
  cardBrand              String?  @map("card_brand") @db.VarChar(20)
  isDefault              Boolean  @default(false) @map("is_default")
  createdAt              DateTime @default(now()) @map("created_at")

  // Relations
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}
